# coding: utf-8

"""
    Comotion Dash API

    Comotion Dash API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from comodash_api_client_lowlevel.configuration import Configuration


class QueryStatusAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'query_id': 'str',
        'statement_type': 'str',
        'status': 'QueryStatusAllOfStatus'
    }

    attribute_map = {
        'query_id': 'queryId',
        'statement_type': 'statementType',
        'status': 'status'
    }

    def __init__(self, query_id=None, statement_type=None, status=None, local_vars_configuration=None):  # noqa: E501
        """QueryStatusAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._query_id = None
        self._statement_type = None
        self._status = None
        self.discriminator = None

        self.query_id = query_id
        self.statement_type = statement_type
        self.status = status

    @property
    def query_id(self):
        """Gets the query_id of this QueryStatusAllOf.  # noqa: E501


        :return: The query_id of this QueryStatusAllOf.  # noqa: E501
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this QueryStatusAllOf.


        :param query_id: The query_id of this QueryStatusAllOf.  # noqa: E501
        :type query_id: str
        """
        if self.local_vars_configuration.client_side_validation and query_id is None:  # noqa: E501
            raise ValueError("Invalid value for `query_id`, must not be `None`")  # noqa: E501

        self._query_id = query_id

    @property
    def statement_type(self):
        """Gets the statement_type of this QueryStatusAllOf.  # noqa: E501


        :return: The statement_type of this QueryStatusAllOf.  # noqa: E501
        :rtype: str
        """
        return self._statement_type

    @statement_type.setter
    def statement_type(self, statement_type):
        """Sets the statement_type of this QueryStatusAllOf.


        :param statement_type: The statement_type of this QueryStatusAllOf.  # noqa: E501
        :type statement_type: str
        """
        if self.local_vars_configuration.client_side_validation and statement_type is None:  # noqa: E501
            raise ValueError("Invalid value for `statement_type`, must not be `None`")  # noqa: E501

        self._statement_type = statement_type

    @property
    def status(self):
        """Gets the status of this QueryStatusAllOf.  # noqa: E501


        :return: The status of this QueryStatusAllOf.  # noqa: E501
        :rtype: QueryStatusAllOfStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QueryStatusAllOf.


        :param status: The status of this QueryStatusAllOf.  # noqa: E501
        :type status: QueryStatusAllOfStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryStatusAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryStatusAllOf):
            return True

        return self.to_dict() != other.to_dict()
