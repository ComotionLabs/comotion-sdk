name: Publish Python üêç distributions üì¶ to PyPI and TestPyPI

on:
  push:
    branches:
      - main
    tags:
      - v**

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies with pipenv
        run: pipenv install --dev --deploy

      - name: Run test suite
        run: pipenv run pytest -v

      - name: Build a binary wheel and a source tarball
        run: |
          pipenv run python -m build --sdist --wheel --outdir dist/
      
      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/


  github-release:
    name: >-
      Sign the Python üêç distribution üì¶ with Sigstore
      and upload them to GitHub Release
    needs:
    - build
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        # Check if the tag indicates a pre-release version (e.g., starts with rc, alpha, beta, or dev)
        if [[ "${GITHUB_REF_NAME}" =~ (rc|alpha|beta|dev) ]]; then
          gh release create "${GITHUB_REF_NAME}" --repo "${GITHUB_REPOSITORY}" --generate-notes --prerelease
        else
          gh release create "${GITHUB_REF_NAME}" --repo "${GITHUB_REPOSITORY}" --generate-notes
        fi
      shell: bash

    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'

  publish-to-pypi:
    name: publish Python üêç distributions üì¶ to PyPI and TestPyPI
    if: startsWith(github.ref, 'refs/tags/v')  # only publish to PyPI on tag pushes
    needs:
      - github-release
    runs-on: ubuntu-latest
    environment:
      name: pypi release
      url: https://pypi.org/p/comotion-sdk
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
  
  build-n-publish-docs:
          name: Build and publish docs to gh-pages branch
          runs-on: ubuntu-latest
          needs:
            - publish-to-pypi
          if: startsWith(github.ref, 'refs/tags/v')
          steps:
          - uses: actions/checkout@v4
          - name: Set up Python 3.8
            uses: actions/setup-python@v5
            with:
              python-version: 3.8
          - name: Install pipenv
            run: pip install pipenv
          - name: Install dependencies with pipenv
            run: pipenv install --dev
          - name: Build documentation
            uses: ammaraskar/sphinx-action@master
            with:
              pre-build-command: "apt-get update --allow-releaseinfo-change -y && apt-get install -y git"
              docs-folder: "docs/"
          # Publish built docs to gh-pages branch.
          - name: Commit documentation changes
            run: |
              git clone https://github.com/ComotionLabs/comotion-sdk.git --branch gh-pages --single-branch gh-pages
              cp -r docs/build/html/* gh-pages/
              cd gh-pages
              touch .nojekyll
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add .
              git commit -m "Update documentation" -a || true
              # The above command will fail if no changes were present, so we ignore
              # that.
          - name: Push changes
            uses: ad-m/github-push-action@master
            with:
              branch: gh-pages
              directory: gh-pages
              github_token: ${{ secrets.GITHUB_TOKEN }}

